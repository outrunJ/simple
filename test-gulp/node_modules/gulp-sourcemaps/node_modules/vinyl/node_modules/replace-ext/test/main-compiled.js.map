{"version":3,"sources":["main.js"],"names":[],"mappings":";;AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAChC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEjB,QAAQ,CAAC,aAAa,EAAE,YAAW;AACjC,IAAE,CAAC,oDAAoD,EAAE,UAAS,IAAI,EAAE;AACtE,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;AAC3D,QAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;AAC1D,QAAI,EAAE,GAAG,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjB,MAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;;AAEH,IAAE,CAAC,kDAAkD,EAAE,UAAS,IAAI,EAAE;AACpE,QAAI,KAAK,GAAG,aAAa,CAAC;AAC1B,QAAI,QAAQ,GAAG,SAAS,CAAC;AACzB,QAAI,EAAE,GAAG,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjB,MAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;;AAEH,IAAE,CAAC,8DAA8D,EAAE,UAAS,IAAI,EAAE;AAChF,QAAI,KAAK,GAAG,EAAE,CAAC;AACf,QAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,QAAI,EAAE,GAAG,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjB,MAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;;AAEH,IAAE,CAAC,mDAAmD,EAAE,UAAS,IAAI,EAAE;AACrE,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;AAC3D,QAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;AACvD,QAAI,EAAE,GAAG,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC/B,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjB,MAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;;AAEH,IAAE,CAAC,iDAAiD,EAAE,UAAS,IAAI,EAAE;AACnE,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;AACpD,QAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;AAC1D,QAAI,EAAE,GAAG,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjB,MAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;CACJ,CAAC,CAAC","file":"main-compiled.js","sourcesContent":["var replaceExt = require('../');\nvar path = require('path');\nvar should = require('should');\nrequire('mocha');\n\ndescribe('replace-ext', function() {\n  it('should return a valid replaced extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test.coffee');\n    var expected = path.join(__dirname, './fixtures/test.js');\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid replaced extension on flat', function(done) {\n    var fname = 'test.coffee';\n    var expected = 'test.js';\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should not return a valid replaced extension on empty string', function(done) {\n    var fname = '';\n    var expected = '';\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid removed extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test.coffee');\n    var expected = path.join(__dirname, './fixtures/test');\n    var nu = replaceExt(fname, '');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid added extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test');\n    var expected = path.join(__dirname, './fixtures/test.js');\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n});\n"]}