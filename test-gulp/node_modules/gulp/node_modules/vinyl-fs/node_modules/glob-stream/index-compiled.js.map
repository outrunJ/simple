{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*jslint node: true */\n\n'use strict';\n\nvar through2 = require('through2');\nvar Combine = require('ordered-read-streams');\nvar unique = require('unique-stream');\n\nvar glob = require('glob');\nvar minimatch = require('minimatch');\nvar glob2base = require('glob2base');\nvar path = require('path');\n\nvar gs = {\n  // creates a stream for a single glob or filter\n  createStream: function(ourGlob, negatives, opt) {\n    if (!negatives) negatives = [];\n    if (!opt) opt = {};\n    if (typeof opt.cwd !== 'string') opt.cwd = process.cwd();\n    if (typeof opt.dot !== 'boolean') opt.dot = false;\n    if (typeof opt.silent !== 'boolean') opt.silent = true;\n    if (typeof opt.nonull !== 'boolean') opt.nonull = false;\n    if (typeof opt.cwdbase !== 'boolean') opt.cwdbase = false;\n    if (opt.cwdbase) opt.base = opt.cwd;\n\n    // remove path relativity to make globs make sense\n    ourGlob = unrelative(opt.cwd, ourGlob);\n    negatives = negatives.map(unrelative.bind(null, opt.cwd));\n\n    // create globbing stuff\n    var globber = new glob.Glob(ourGlob, opt);\n\n    // extract base path from glob\n    var basePath = opt.base ? opt.base : glob2base(globber);\n\n    // create stream and map events from globber to it\n    var stream = through2.obj(negatives.length ? filterNegatives : undefined);\n\n    globber.on('error', stream.emit.bind(stream, 'error'));\n    globber.on('end', function(/* some args here so can't use bind directly */){\n      stream.end();\n    });\n    globber.on('match', function(filename) {\n      stream.write({\n        cwd: opt.cwd,\n        base: basePath,\n        path: path.resolve(opt.cwd, filename)\n      });\n    });\n\n    return stream;\n\n    function filterNegatives(filename, enc, cb) {\n      var matcha = isMatch.bind(null, filename, opt);\n      if (negatives.every(matcha)) {\n        cb(null, filename); // pass\n      } else {\n        cb(); // ignore\n      }\n    }\n  },\n\n  // creates a stream for multiple globs or filters\n  create: function(globs, opt) {\n    if (!opt) opt = {};\n\n    // only one glob no need to aggregate\n    if (!Array.isArray(globs)) return gs.createStream(globs, null, opt);\n\n    var positives = globs.filter(isPositive);\n    var negatives = globs.filter(isNegative);\n\n    if (positives.length === 0) throw new Error(\"Missing positive glob\");\n\n    // only one positive glob no need to aggregate\n    if (positives.length === 1) return gs.createStream(positives[0], negatives, opt);\n\n    // create all individual streams\n    var streams = positives.map(function(glob){\n      return gs.createStream(glob, negatives, opt);\n    });\n\n    // then just pipe them to a single unique stream and return it\n    var aggregate = new Combine(streams);\n    var uniqueStream = unique('path');\n\n    return aggregate.pipe(uniqueStream);\n  }\n};\n\nfunction isMatch(file, opt, pattern) {\n  if (typeof pattern === 'string') return minimatch(file.path, pattern, opt);\n  if (pattern instanceof RegExp) return pattern.test(file.path);\n  return true; // unknown glob type?\n}\n\nfunction isNegative(pattern) {\n  if (typeof pattern !== 'string') return true;\n  if (pattern[0] === '!') return true;\n  return false;\n}\n\nfunction isPositive(pattern) {\n  return !isNegative(pattern);\n}\n\nfunction unrelative(cwd, glob) {\n  var mod = '';\n  if (glob[0] === '!') {\n    mod = glob[0];\n    glob = glob.slice(1);\n  }\n  return mod+path.resolve(cwd, glob);\n}\n\n\nmodule.exports = gs;\n"]}