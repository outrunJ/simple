{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;IACxB,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;;AAE/B,IAAI,CAAC,6BAA6B,EAAE,UAAS,CAAC,EAAE;AAC9C,MAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,EAAG,IAAI,EAAE,CAAC,CAAC;AAC5C,GAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChB,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAC;;AAEH,IAAI,CAAC,+BAA+B,EAAE,UAAS,CAAC,EAAE;AAChD,MAAI,MAAM,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AACjD,GAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC;AAC1C,GAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,yBAAyB,CAAC,CAAC;AACpD,GAAC,CAAC,GAAG,EAAE,CAAC;CACT,CAAC,CAAC;;AAEH,IAAI,CAAC,yCAAyC,EAAE,UAAS,CAAC,EAAE;AAC1D,MAAI,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3D,GAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;AACzC,GAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,yBAAyB,CAAC,CAAC;AACpD,GAAC,CAAC,GAAG,EAAE,CAAC;CACT,CAAC,CAAC;;AAEH,IAAI,CAAC,sCAAsC,EAAE,UAAS,CAAC,EAAE;AACvD,MAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAG,OAAO,EAAE,EAAE,CAAC;AAC/C,MAAI,MAAM,GAAG,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC7B,GAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;AACxD,GAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;;AAEnD,GAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;AACrE,GAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;AACnD,GAAC,CAAC,GAAG,EAAE,CAAC;CACT,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["var defaults = require('./'),\n    test = require('tap').test;\n\ntest(\"ensure options is an object\", function(t) {\n  var options = defaults(false, { a : true });\n  t.ok(options.a);\n  t.end()\n});\n\ntest(\"ensure defaults override keys\", function(t) {\n  var result = defaults({}, { a: false, b: true });\n  t.ok(result.b, 'b merges over undefined');\n  t.equal(result.a, false, 'a merges over undefined');\n  t.end();\n});\n\ntest(\"ensure defined keys are not overwritten\", function(t) {\n  var result = defaults({ b: false }, { a: false, b: true });\n  t.equal(result.b, false, 'b not merged');\n  t.equal(result.a, false, 'a merges over undefined');\n  t.end();\n});\n\ntest(\"ensure defaults clone nested objects\", function(t) {\n  var d = { a: [1,2,3], b: { hello : 'world' } };\n  var result = defaults({}, d);\n  t.equal(result.a.length, 3, 'objects should be clones');\n  t.ok(result.a !== d.a, 'objects should be clones');\n\n  t.equal(Object.keys(result.b).length, 1, 'objects should be clones');\n  t.ok(result.b !== d.b, 'objects should be clones');\n  t.end();\n});\n\n"]}