{"version":3,"sources":["strict.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;;AAE9B,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAE9B,IAAI,CAAC,QAAQ,EAAE,UAAS,CAAC,EAAE;AACzB,MAAI,KAAK,CAAA;;AAET,MAAI;AACF,SAAK,GAAG,KAAK,CAAA;AACb,aAAS,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC,CAAA;GAC7B,CAAC,OAAO,EAAE,EAAE;AACX,SAAK,GAAG,IAAI,CAAA;AACZ,KAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAA;GACzC,SAAS;AACR,KAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;GACrB;;AAED,MAAI;AACF,SAAK,GAAG,KAAK,CAAA;AACb,aAAS,CAAC,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,IAAI,CAAC,CAAA;GAC9B,CAAC,OAAO,EAAE,EAAE;AACX,SAAK,GAAG,IAAI,CAAA;AACZ,KAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAA;GAC3C,SAAS;AACR,KAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;GACrB;;AAED,MAAI;AACF,SAAK,GAAG,KAAK,CAAA;AACb,aAAS,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EAAC,UAAU,EAAC,EAAE,IAAI,CAAC,CAAA;GAC/C,CAAC,OAAO,EAAE,EAAE;AACX,SAAK,GAAG,IAAI,CAAA;AACZ,KAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,6BAA6B,CAAC,CAAA;GACnD,SAAS;AACR,KAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;GACrB;;;AAAA,AAGD,MAAI,IAAI,GAAG,EAAC,IAAI,EAAC,KAAK,EAAC,OAAO,EAAC,UAAU,EAAC,YAAY,EAAC;AACrD,OAAC,EAAC,WAAW;AACb,OAAC,EAAC,0DAA0D;KAC7D,EAAC,CAAA;AACF,WAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;AACtB,GAAC,CAAC,IAAI,CAAC,IAAI,EACJ,EAAE,IAAI,EAAE,GAAG;AACT,WAAO,EAAE,OAAO;AAChB,gBAAY,EACX,EAAE,CAAC,EAAE,WAAW;AACd,OAAC,EAAE,0DAA0D,EAAE;AAClE,UAAM,EAAE,8BAA8B;AACtC,OAAG,EAAE,SAAS,EAAE,CAAC,CAAA;;AAE1B,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"strict-compiled.js","sourcesContent":["var test = require(\"tap\").test\n\nvar normalize = require(\"../\")\n\ntest(\"strict\", function(t) {\n  var threw\n\n  try {\n    threw = false\n    normalize({name: \"X\"}, true)\n  } catch (er) {\n    threw = true\n    t.equal(er.message, 'Invalid name: \"X\"')\n  } finally {\n    t.equal(threw, true)\n  }\n\n  try {\n    threw = false\n    normalize({name:\" x \"}, true)\n  } catch (er) {\n    threw = true\n    t.equal(er.message, 'Invalid name: \" x \"')\n  } finally {\n    t.equal(threw, true)\n  }\n\n  try {\n    threw = false\n    normalize({name:\"x\",version:\"01.02.03\"}, true)\n  } catch (er) {\n    threw = true\n    t.equal(er.message, 'Invalid version: \"01.02.03\"')\n  } finally {\n    t.equal(threw, true)\n  }\n\n  // these should not throw\n  var slob = {name:\" X \",version:\"01.02.03\",dependencies:{\n    y:\">01.02.03\",\n    z:\"! 99 $$ASFJ(Aawenf90awenf as;naw.3j3qnraw || an elephant\"\n  }}\n  normalize(slob, false)\n  t.same(slob,\n         { name: 'X',\n           version: '1.2.3',\n           dependencies:\n            { y: '>01.02.03',\n              z: '! 99 $$ASFJ(Aawenf90awenf as;naw.3j3qnraw || an elephant' },\n           readme: 'ERROR: No README data found!',\n           _id: 'X@1.2.3' })\n\n  t.end()\n})\n"]}