{"version":3,"sources":["signal-exit-test.js"],"names":[],"mappings":"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","file":"signal-exit-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar exec = require('child_process').exec,\n  expect = require('chai').expect,\n  assert = require('assert')\n\nrequire('chai').should()\nrequire('tap').mochaGlobals()\n\ndescribe('signal-exit', function () {\n\n  it('receives an exit event when a process exits normally', function (done) {\n    exec(process.execPath + ' ./test/fixtures/end-of-execution.js', function (err, stdout, stderr) {\n      expect(err).to.equal(null)\n      stdout.should.match(/reached end of execution, 0, null/)\n      done()\n    })\n  })\n\n  it('receives an exit event when a process is terminated with sigint', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigint.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/exited with sigint, null, SIGINT/)\n      done()\n    })\n  })\n\n  it('receives an exit event when a process is terminated with sigterm', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigterm.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/exited with sigterm, null, SIGTERM/)\n      done()\n    })\n  })\n\n  it('receives an exit event when process.exit() is called', function (done) {\n    exec(process.execPath + ' ./test/fixtures/exit.js', function (err, stdout, stderr) {\n      err.code.should.equal(32)\n      stdout.should.match(/exited with process\\.exit\\(\\), 32, null/)\n      done()\n    })\n  })\n\n  it('does not exit if user handles signal', function (done) {\n    exec(process.execPath + ' ./test/fixtures/signal-listener.js', function (err, stdout, stderr) {\n      assert(err)\n      assert.equal(stdout, 'exited calledListener=4, code=null, signal=\"SIGHUP\"\\n')\n      done()\n    })\n  })\n\n  it('ensures that if alwaysLast=true, the handler is run last (signal)', function (done) {\n    exec(process.execPath + ' ./test/fixtures/signal-last.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/first counter=1/)\n      stdout.should.match(/last counter=2/)\n      done()\n    })\n  })\n\n  it('ensures that if alwaysLast=true, the handler is run last (normal exit)', function (done) {\n    exec(process.execPath + ' ./test/fixtures/exit-last.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      stdout.should.match(/first counter=1/)\n      stdout.should.match(/last counter=2/)\n      done()\n    })\n  })\n\n  it('works when loaded multiple times', function (done) {\n    exec(process.execPath + ' ./test/fixtures/multiple-load.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/first counter=1, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/first counter=2, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/last counter=3, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/last counter=4, code=null, signal=\"SIGHUP\"/)\n      done()\n    })\n  })\n\n  // TODO: test on a few non-OSX machines.\n  it('removes handlers when fully unwrapped', function (done) {\n    exec(process.execPath + ' ./test/fixtures/unwrap.js', function (err, stdout, stderr) {\n      // on Travis CI no err.signal is populated but\n      // err.code is 129 (which I think tends to be SIGHUP).\n      var expectedCode = process.env.TRAVIS ? 129 : null\n\n      assert(err)\n      if (!process.env.TRAVIS) err.signal.should.equal('SIGHUP')\n      expect(err.code).to.equal(expectedCode)\n      done()\n    })\n  })\n\n  it('does not load() or unload() more than once', function (done) {\n    exec(process.execPath + ' ./test/fixtures/load-unload.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      done()\n    })\n  })\n\n  it('handles uncatchable signals with grace and poise', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigkill.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      done()\n    })\n  })\n})\n"]}