{"version":3,"sources":["multi-exit.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI;IACtC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAEpB,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAA;AAC1D,IAAI,MAAM,GAAG,OAAO,CAAC,oCAAoC,CAAC;;;;AAAA,AAI1D,SAAS,QAAQ,GAAI;AACnB,SAAO,eAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAAA;CAC5C;;;AAAA,AAGD,IAAI,KAAK,GAAG,CAAE,UAAU,EAAE,QAAQ,CAAE,CAAA;AACpC,IAAI,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;;;AAAA,AAInC,IAAI,KAAK,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAE;;;;AAAA,AAI5B,IAAI,OAAO,GAAG,CAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;AAC9C,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;;;AAAA,AAGlD,IAAI,QAAQ,GAAG,CAAE,SAAS,EAAE,WAAW,CAAE,CAAA;;AAEzC,IAAI,IAAI,GAAG,EAAE,CAAA;AACb,KAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC5B,MAAI,SAAS,GAAG,IAAI,KAAK,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;AAC/C,WAAS,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAChC,WAAO,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE;AAChC,cAAQ,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AAClC,YAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;OACnD,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA;;AAEF,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AAC1B,GAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE;AACvB,QAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,GAAG,GAAG,GAAG,OAAO,GAAG,GAAG,GAAG,GAAG,CAAA;AACtD,QAAI,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AACvC,UAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AAC5B,UAAI,GAAG,EAAE;AACP,WAAG,CAAC,UAAU,GAAG,GAAG,CAAC,IAAI,CAAA;AACzB,WAAG,CAAC,YAAY,GAAG,GAAG,CAAC,MAAM,CAAA;OAC9B,MAAM;AACL,WAAG,CAAC,UAAU,GAAG,CAAC,CAAA;AAClB,WAAG,CAAC,YAAY,GAAG,IAAI,CAAA;OACxB;AACD,SAAG,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACtC,OAAC,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AACxB,OAAC,CAAC,GAAG,EAAE,CAAA;KACR,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"multi-exit-compiled.js","sourcesContent":["var exec = require('child_process').exec,\n  t = require('tap')\n\nvar fixture = require.resolve('./fixtures/change-code.js')\nvar expect = require('./fixtures/change-code-expect.json')\n\n// process.exitCode has problems prior to:\n// https://github.com/joyent/node/commit/c0d81f90996667a658aa4403123e02161262506a\nfunction isZero10 () {\n  return /^v0\\.10\\..+$/.test(process.version)\n}\n\n// process.exit(code), process.exitCode = code, normal exit\nvar types = [ 'explicit', 'normal' ]\nif (!isZero10()) types.push('code')\n\n// initial code that is set.  Note, for 'normal' exit, there's no\n// point doing these, because we just exit without modifying code\nvar codes = [ 0, 2, 'null' ]\n\n// do not change, change to 5 with exit(), change to 5 with exitCode,\n// change to 5 and then to 2 with exit(), change twice with exitcode\nvar changes = [ 'nochange', 'change', 'twice']\nif (!isZero10()) changes.push('code', 'twicecode')\n\n// use signal-exit, use process.on('exit')\nvar handlers = [ 'sigexit', 'nosigexit' ]\n\nvar opts = []\ntypes.forEach(function (type) {\n  var testCodes = type === 'normal' ? [0] : codes\n  testCodes.forEach(function (code) {\n    changes.forEach(function (change) {\n      handlers.forEach(function (handler) {\n        opts.push([type, code, change, handler].join(' '))\n      })\n    })\n  })\n})\n\nopts.forEach(function (opt) {\n  t.test(opt, function (t) {\n    var cmd = process.execPath + ' ' + fixture + ' ' + opt\n    exec(cmd, function (err, stdout, stderr) {\n      var res = JSON.parse(stdout)\n      if (err) {\n        res.actualCode = err.code\n        res.actualSignal = err.signal\n      } else {\n        res.actualCode = 0\n        res.actualSignal = null\n      }\n      res.stderr = stderr.trim().split('\\n')\n      t.same(res, expect[opt])\n      t.end()\n    })\n  })\n})\n"]}