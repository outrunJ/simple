{"version":3,"sources":["dependencies.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,IAAI,SAAS,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAA;;AAE3C,IAAI,eAAe,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAA;AAC7D,IAAI,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAA;;AAE9C,GAAG,CAAC,IAAI,CAAC,wDAAwD,EAAE,UAAS,CAAC,EAAE;AAC7E,MAAI,CAAC,CAAA;AACL,MAAI,QAAQ,GAAG,EAAE,CAAA;AACjB,WAAS,IAAI,CAAC,CAAC,EAAE;AACf,YAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;GACjB;AACD,WAAS,CAAC,CAAC,GAAC;AACV,gBAAY,EAAE,EAAE,GAAG,EAAE,GAAG,EAAC;AACzB,mBAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAC;AAC5B,wBAAoB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAC;GAClC,EAAE,IAAI,CAAC,CAAA;;AAER,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,mBAAmB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;AACvE,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,mBAAmB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;AACvE,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,mBAAmB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;AACvE,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AACzC,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AACzC,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AACzC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,GAAG,CAAC,IAAI,CAAC,qEAAqE,EAAE,UAAS,CAAC,EAAE;AAC1F,MAAI,CAAC,CAAA;AACL,MAAI,QAAQ,GAAG,EAAE,CAAA;AACjB,WAAS,IAAI,CAAC,CAAC,EAAE;AACf,YAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;GACjB;AACD,WAAS,CAAC,CAAC,GAAC;AACV,sBAAkB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAC,GAAG,EAAC,KAAK,EAAC,CAAC;GAC9C,EAAE,IAAI,CAAC,CAAA;;AAER,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAA;AACxE,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,yBAAyB,EAAE,EAAC,GAAG,EAAC,KAAK,EAAC,CAAC,CAAA;AAChF,MAAI,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;AAC9E,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AACzC,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AACzC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"dependencies-compiled.js","sourcesContent":["var tap = require(\"tap\")\nvar normalize = require(\"../lib/normalize\")\n\nvar warningMessages = require(\"../lib/warning_messages.json\")\nvar safeFormat = require(\"../lib/safe_format\")\n\ntap.test(\"warn if dependency contains anything else but a string\", function(t) {\n  var a\n  var warnings = []\n  function warn(w) {\n    warnings.push(w)\n  }\n  normalize(a={\n    dependencies: { \"a\": 123},\n    devDependencies: { \"b\": 456},\n    optionalDependencies: { \"c\": 789}\n  }, warn)\n  \n  var wanted1 = safeFormat(warningMessages.nonStringDependency, \"a\", 123)\n  var wanted2 = safeFormat(warningMessages.nonStringDependency, \"b\", 456)\n  var wanted3 = safeFormat(warningMessages.nonStringDependency, \"c\", 789)\n  t.ok(~warnings.indexOf(wanted1), wanted1)\n  t.ok(~warnings.indexOf(wanted2), wanted2)\n  t.ok(~warnings.indexOf(wanted3), wanted3)\n  t.end()\n})\n\ntap.test(\"warn if bundleDependencies array contains anything else but strings\", function(t) {\n  var a\n  var warnings = []\n  function warn(w) {\n    warnings.push(w)\n  }\n  normalize(a={\n    bundleDependencies: [\"abc\", 123, {foo:\"bar\"}]\n  }, warn)\n  \n  var wanted1 = safeFormat(warningMessages.nonStringBundleDependency, 123)\n  var wanted2 = safeFormat(warningMessages.nonStringBundleDependency, {foo:\"bar\"})\n  var wanted2 = safeFormat(warningMessages.nonDependencyBundleDependency, \"abc\")\n  t.ok(~warnings.indexOf(wanted1), wanted1)\n  t.ok(~warnings.indexOf(wanted2), wanted2)\n  t.end()\n})\n"]}