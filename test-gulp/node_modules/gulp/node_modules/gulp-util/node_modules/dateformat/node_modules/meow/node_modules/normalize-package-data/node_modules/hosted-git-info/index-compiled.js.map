{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict'\nvar url = require('url')\nvar gitHosts = require('./git-host-info.js')\nvar GitHost = module.exports = require('./git-host.js')\n\nvar protocolToRepresentationMap = {\n  'git+ssh': 'sshurl',\n  'git+https': 'https',\n  'ssh': 'sshurl',\n  'git': 'git'\n}\n\nfunction protocolToRepresentation (protocol) {\n  if (protocol.substr(-1) === ':') protocol = protocol.slice(0, -1)\n  return protocolToRepresentationMap[protocol] || protocol\n}\n\nvar authProtocols = {\n  'git:': true,\n  'https:': true,\n  'git+https:': true,\n  'http:': true,\n  'git+http:': true\n}\n\nmodule.exports.fromUrl = function (giturl) {\n  if (giturl == null || giturl === '') return\n  var url = fixupUnqualifiedGist(\n    isGitHubShorthand(giturl) ? 'github:' + giturl : giturl\n  )\n  var parsed = parseGitUrl(url)\n  var matches = Object.keys(gitHosts).map(function (gitHostName) {\n    var gitHostInfo = gitHosts[gitHostName]\n    var auth = null\n    if (parsed.auth && authProtocols[parsed.protocol]) {\n      auth = decodeURIComponent(parsed.auth)\n    }\n    var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null\n    var user = null\n    var project = null\n    var defaultRepresentation = null\n    if (parsed.protocol === gitHostName + ':') {\n      user = decodeURIComponent(parsed.host)\n      project = parsed.path && decodeURIComponent(parsed.path.replace(/^[/](.*?)(?:[.]git)?$/, '$1'))\n      defaultRepresentation = 'shortcut'\n    } else {\n      if (parsed.host !== gitHostInfo.domain) return\n      if (!gitHostInfo.protocols_re.test(parsed.protocol)) return\n      var pathmatch = gitHostInfo.pathmatch\n      var matched = parsed.path.match(pathmatch)\n      if (!matched) return\n      if (matched[1] != null) user = decodeURIComponent(matched[1])\n      if (matched[2] != null) project = decodeURIComponent(matched[2])\n      defaultRepresentation = protocolToRepresentation(parsed.protocol)\n    }\n    return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation)\n  }).filter(function (gitHostInfo) { return gitHostInfo })\n  if (matches.length !== 1) return\n  return matches[0]\n}\n\nfunction isGitHubShorthand (arg) {\n  // Note: This does not fully test the git ref format.\n  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html\n  //\n  // The only way to do this properly would be to shell out to\n  // git-check-ref-format, and as this is a fast sync function,\n  // we don't want to do that.  Just let git fail if it turns\n  // out that the commit-ish is invalid.\n  // GH usernames cannot start with . or -\n  return /^[^:@%/\\s.-][^:@%/\\s]*[/][^:@\\s/%]+(?:#.*)?$/.test(arg)\n}\n\nfunction fixupUnqualifiedGist (giturl) {\n  // necessary for round-tripping gists\n  var parsed = url.parse(giturl)\n  if (parsed.protocol === 'gist:' && parsed.host && !parsed.path) {\n    return parsed.protocol + '/' + parsed.host\n  } else {\n    return giturl\n  }\n}\n\nfunction parseGitUrl (giturl) {\n  if (typeof giturl !== 'string') giturl = '' + giturl\n  var matched = giturl.match(/^([^@]+)@([^:]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/)\n  if (!matched) return url.parse(giturl)\n  return {\n    protocol: 'git+ssh:',\n    slashes: true,\n    auth: matched[1],\n    host: matched[2],\n    port: null,\n    hostname: matched[2],\n    hash: matched[4],\n    search: null,\n    query: null,\n    pathname: '/' + matched[3],\n    path: '/' + matched[3],\n    href: 'git+ssh://' + matched[1] + '@' + matched[2] +\n          '/' + matched[3] + (matched[4] || '')\n  }\n}\n"]}