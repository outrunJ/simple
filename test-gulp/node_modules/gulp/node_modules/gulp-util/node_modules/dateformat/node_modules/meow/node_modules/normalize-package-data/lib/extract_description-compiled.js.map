{"version":3,"sources":["extract_description.js"],"names":[],"mappings":";;AAAA,MAAM,CAAC,OAAO,GAAG,kBAAkB;;;AAAA,AAGnC,SAAS,kBAAkB,CAAE,CAAC,EAAE;AAC9B,MAAI,CAAC,CAAC,EAAE,OAAO;AACf,MAAI,CAAC,KAAK,8BAA8B,EAAE,OAAO;;;AAAA,AAGjD,GAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACxB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAG,IAAE;AAC3D,MAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAA;AAChB,OAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAG,IAAE;AAChD,SAAO,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;CACtC","file":"extract_description-compiled.js","sourcesContent":["module.exports = extractDescription\n\n// Extracts description from contents of a readme file in markdown format\nfunction extractDescription (d) {\n  if (!d) return;\n  if (d === \"ERROR: No README data found!\") return;\n  // the first block of text before the first heading\n  // that isn't the first line heading\n  d = d.trim().split('\\n')\n  for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s ++);\n  var l = d.length\n  for (var e = s + 1; e < l && d[e].trim(); e ++);\n  return d.slice(s, e).join(' ').trim()\n}\n"]}