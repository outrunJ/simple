{"version":3,"sources":["parent.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAC5B,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;;AAEhC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AAC7B,QAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;CACvC;;AAED,IAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAA;AAC1C,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;AAC1C,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;;AAExC,IAAI,IAAI,GAAG,CAAC,EAAE;AACZ,MAAI,GAAG,UAAU,CAAA;CAClB;;AAED,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC,EAAE;AAC5D,OAAK,EAAE,CAAE,CAAC,EAAE,MAAM,EAAE,MAAM,CAAE;CAC7B,CAAC,CAAA;;AAEF,IAAI,CAAC,IAAI,EAAE;AACT,OAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY;AAClC,SAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;GACnB,CAAC,CAAA;CACH;;AAED,IAAI,MAAM,GAAG,EAAE,CAAA;AACf,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;AACnC,QAAM,IAAI,CAAC,CAAA;CACZ,CAAC,CAAA;;AAEF,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,GAAG,EAAE;AACrC,MAAI;AACF,UAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;GAC5B,CAAC,OAAO,EAAE,EAAE;AACX,WAAO,CAAC,GAAG,CAAC,IAAI,EAAE;AAChB,WAAK,EAAE,wBAAwB,GAAG,EAAE,CAAC,OAAO;AAC5C,YAAM,EAAE,MAAM;AACd,SAAG,EAAE,OAAO,CAAC,GAAG;AAChB,WAAK,EAAE,KAAK,CAAC,GAAG;AAChB,UAAI,EAAE,IAAI;AACV,YAAM,EAAE,CAAE,IAAI,EAAE,MAAM,CAAE;AACxB,YAAM,EAAE,CAAE,IAAI,EAAE,GAAG,CAAE;KACtB,CAAC,CAAA;AACF,WAAM;GACP;AACD,MAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC7B,OAAG,GAAG,CAAC,CAAC,GAAG,CAAA;GACZ;AACD,QAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,CAAE,IAAI,EAAE,GAAG,CAAE,CAAA;AAClD,SAAO,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;CAC1B,CAAC,CAAA","file":"parent-compiled.js","sourcesContent":["var signal = process.argv[2]\nvar gens = +process.argv[3] || 0\n\nif (!signal || !isNaN(signal)) {\n  throw new Error('signal not provided')\n}\n\nvar spawn = require('child_process').spawn\nvar file = require.resolve('./awaiter.js')\nconsole.error(process.pid, signal, gens)\n\nif (gens > 0) {\n  file = __filename\n}\n\nvar child = spawn(process.execPath, [file, signal, gens - 1], {\n  stdio: [ 0, 'pipe', 'pipe' ]\n})\n\nif (!gens) {\n  child.stderr.on('data', function () {\n    child.kill(signal)\n  })\n}\n\nvar result = ''\nchild.stdout.on('data', function (c) {\n  result += c\n})\n\nchild.on('close', function (code, sig) {\n  try {\n    result = JSON.parse(result)\n  } catch (er) {\n    console.log('%j', {\n      error: 'failed to parse json\\n' + er.message,\n      result: result,\n      pid: process.pid,\n      child: child.pid,\n      gens: gens,\n      expect: [ null, signal ],\n      actual: [ code, sig ]\n    })\n    return\n  }\n  if (result.wanted[1] === true) {\n    sig = !!sig\n  }\n  result.external = result.external || [ code, sig ]\n  console.log('%j', result)\n})\n"]}