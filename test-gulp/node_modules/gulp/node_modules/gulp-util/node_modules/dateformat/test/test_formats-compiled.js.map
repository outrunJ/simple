{"version":3,"sources":["test_formats.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAE9B,IAAI,UAAU,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;AAE9C,IAAI,OAAO,GAAG;AACZ,WAAS,EAAgB,0BAA0B;AACnD,aAAW,EAAc,UAAU;AACnC,cAAY,EAAa,cAAc;AACvC,YAAU,EAAe,mBAAmB;AAC5C,YAAU,EAAe,8BAA8B;AACvD,aAAW,EAAc,SAAS;AAClC,cAAY,EAAa,YAAY;AACrC,YAAU,EAAe,mCAAmC;AAC5D,WAAS,EAAgB,YAAY;AACrC,WAAS,EAAgB,UAAU;AACnC,eAAa,EAAY,gCAAgC;AACzD,kBAAgB,EAAS,EAAE;AAC3B,uBAAqB,EAAI,kDAAkD;CAC5E,CAAC;;AAEF,SAAS,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE;AACpB,MAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;AACjB,SAAO,CAAC,CAAC,MAAM,GAAG,IAAI,EAAE;AACtB,KAAC,GAAG,GAAG,GAAG,CAAC,CAAC;GACb;AACD,SAAO,CAAC,CAAC;CACZ;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE;AACzB,MAAI,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACtC,MAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;AACzC,MAAI,OAAO,GAAG,AAAC,CAAC,CAAC,GAAG,MAAM,GAAK,KAAK,GAAG,EAAE,AAAC,CAAC;AAC3C,MAAI,IAAI,GAAG,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,SAAO;AACL,UAAM,EAAE,MAAM;AACd,SAAK,EAAE,KAAK;AACZ,WAAO,EAAE,OAAO;AAChB,QAAI,EAAE,IAAI;GACX,CAAC;CACH;;AAED,SAAS,cAAc,CAAC,IAAI,EAAE;AAC5B,MAAI,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAC/B,SAAO,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;CACpE;;AAED,QAAQ,CAAC,2BAA2B,EAAE,YAAW;AAC/C,GAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,UAAS,KAAK,EAAE,GAAG,EAAE;AAC5C,MAAE,CAAC,iBAAiB,GAAG,GAAG,GAAG,QAAQ,EAAE,UAAS,IAAI,EAAE;AACpD,UAAI,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7C,UAAI,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;AACnC,UAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAC7B,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CACjC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AACzD,UAAI,GAAG,KAAK,gBAAgB,EAAE;AAC5B,YAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AAC9B,WAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,KAAK,EAC7B,GAAG,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAChD,YAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;OACxD;AACD,UAAI,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAClC,YAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACrC,UAAI,EAAE,CAAC;KACR,CAAC,CAAC;GACJ,CAAC,CAAC;AACH,IAAE,CAAC,iDAAiD,EAAE,UAAS,IAAI,EAAE;AACnE,QAAI,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7C,QAAI,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,QAAI,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;;AAE7B,UAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACrC,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test_formats-compiled.js","sourcesContent":["var assert = require('assert');\n\nvar _ = require('underscore');\n\nvar dateFormat = require('../lib/dateformat');\n\nvar expects = {\n  'default':               'Wed Nov 26 2014 13:19:44',\n  'shortDate':             '11/26/14',\n  'mediumDate':            'Nov 26, 2014',\n  'longDate':              'November 26, 2014',\n  'fullDate':              'Wednesday, November 26, 2014',\n  'shortTime':             '1:19 PM',\n  'mediumTime':            '1:19:44 PM',\n  'longTime':              '1:19:44 PM %TZ_PREFIX%%TZ_OFFSET%',\n  'isoDate':               '2014-11-26',\n  'isoTime':               '13:19:44',\n  'isoDateTime':           '2014-11-26T13:19:44%TZ_OFFSET%',\n  'isoUtcDateTime':        '',\n  'expiresHeaderFormat':   'Wed, 26 Nov 2014 13:19:44 %TZ_PREFIX%%TZ_OFFSET%'\n};\n\nfunction pad(num, size) {\n    var s = num + '';\n    while (s.length < size) {\n      s = '0' + s;\n    }\n    return s;\n}\n\nfunction parseOffset(date) {\n  var offset = date.getTimezoneOffset();\n  var hours = Math.floor(-1 * offset / 60);\n  var minutes = (-1 * offset) - (hours * 60);\n  var sign = offset > 0 ? '-' : '+';\n  return {\n    offset: offset,\n    hours: hours,\n    minutes: minutes,\n    sign: sign,\n  };\n}\n\nfunction timezoneOffset(date) {\n  var offset = parseOffset(date);\n  return offset.sign + pad(offset.hours, 2) + pad(offset.minutes, 2);\n}\n\ndescribe('dateformat([now], [mask])', function() {\n  _.each(dateFormat.masks, function(value, key) {\n    it('should format `' + key + '` mask', function(done) {\n      var now = new Date(2014, 10, 26, 13, 19, 44);\n      var tzOffset = timezoneOffset(now);\n      var expected = expects[key].replace(/%TZ_PREFIX%/, 'GMT')\n                                 .replace(/%TZ_OFFSET%/g, tzOffset)\n                                 .replace(/GMT\\+0000/g, 'UTC');\n      if (key === 'isoUtcDateTime') {\n        var offset = parseOffset(now);\n        now.setHours(now.getHours() - offset.hours,\n                     now.getMinutes() - offset.minutes);\n        var expected = now.toISOString().replace(/\\.000/g, '');\n      }\n      var actual = dateFormat(now, key);\n      assert.strictEqual(actual, expected);\n      done();\n    });\n  });\n  it('should use `default` mask, when `mask` is empty', function(done) {\n    var now = new Date(2014, 10, 26, 13, 19, 44);\n    var expected = expects['default'];\n    var actual = dateFormat(now);\n\n    assert.strictEqual(actual, expected);\n    done();\n  });\n});\n"]}