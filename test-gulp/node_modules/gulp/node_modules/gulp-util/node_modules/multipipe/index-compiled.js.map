{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAKA,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;;;;;;AAAC,AAM/B,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK;;;;;;AAAC,AAMrB,IAAI,IAAI,GAAG;AACT,cAAY,EAAE,KAAK;CACpB;;;;;;AAAC,AAMF,MAAM,CAAC,OAAO,GAAG,IAAI;;;;;;;;;;AAAC,AAUtB,SAAS,IAAI,GAAE;AACb,MAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;AAC/C,MAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpC,MAAI,EAAE,CAAC;AACP,MAAI,UAAU,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;AACpD,MAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GAC5B;AACD,MAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACvB,MAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvC,MAAI,GAAG,CAAC;;AAER,MAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,KAClE,IAAI,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,KAAK,CAAC,KAChC,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,IAAI,CAAC,KAC9B,GAAG,GAAG,IAAI,MAAM,EAAA,CAAC;;AAEtB,SAAO,CAAC,OAAO,CAAC,UAAS,MAAM,EAAE,CAAC,EAAC;AACjC,QAAI,IAAI,GAAG,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;AACxB,QAAI,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,MAAM,IAAI,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;GACpE,CAAC,CAAC;;AAEH,MAAI,EAAE,EAAE;QAIG,GAAG,GAAZ,SAAS,GAAG,CAAC,GAAG,EAAC;AACf,UAAI,KAAK,EAAE,OAAO;AAClB,WAAK,GAAG,IAAI,CAAC;AACb,QAAE,CAAC,GAAG,CAAC,CAAC;KACT;;AAPD,QAAI,KAAK,GAAG,KAAK,CAAC;AAClB,OAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACrB,QAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;GAMxB;;AAED,SAAO,GAAG,CAAC;CACZ","file":"index-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar duplexer = require('duplexer2');\nvar Stream = require('stream');\n\n/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Duplexer options.\n */\n\nvar opts = {\n  bubbleErrors: false\n};\n\n/**\n * Expose `pipe`.\n */\n\nmodule.exports = pipe;\n\n/**\n * Pipe.\n *\n * @param {Stream,...,[Function]}\n * @return {Stream}\n * @api public\n */\n\nfunction pipe(){\n  if (arguments.length == 1) return arguments[0];\n  var streams = slice.call(arguments);\n  var cb;\n  if ('function' == typeof streams[streams.length - 1]) {\n    cb = streams.splice(-1)[0];\n  }\n  var first = streams[0];\n  var last = streams[streams.length - 1];\n  var ret;\n  \n  if (first.writable && last.readable) ret = duplexer(opts, first, last);\n  else if (first.writable) ret = first;\n  else if (last.readable) ret = last;\n  else ret = new Stream;\n  \n  streams.forEach(function(stream, i){\n    var next = streams[i+1];\n    if (next) stream.pipe(next);\n    if (stream != ret) stream.on('error', ret.emit.bind(ret, 'error'));\n  });\n\n  if (cb) {\n    var ended = false;\n    ret.on('error', end);\n    last.on('finish', end);\n    function end(err){\n      if (ended) return;\n      ended = true;\n      cb(err);\n    }\n  }\n\n  return ret;\n}\n\n"]}