{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,IAAI,WAAW,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACtD,IAAI,WAAW,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;AAC3F,IAAI,OAAO,GAAG,CAAC,EAAE,GAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;;AAE1C,MAAM,CAAC,OAAO,GAAG,UAAU,MAAM,EAAE,IAAI,EAAE;AACxC,KAAI,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;;AAErF,QAAO,GAAG,KAAK,CAAC;AAChB,QAAO,GAAG,KAAK,CAAC;AAChB,KAAI,IAAI,EAAE;AACT,SAAO,GAAG,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;AAChC,SAAO,GAAG,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;EAChC;;AAED,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAClD,SAAO,EAAE,CAAC;EACV;AACD,KAAI,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;AACnE,SAAO,EAAE,CAAC;EACV;;AAED,QAAO,GAAG,EAAE;;;AAAC,AAGb,MAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACvB,MAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AAAC,AACrB,cAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,MAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACvB,eAAY,GAAG,YAAY,GAAG,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC;AAAC,GAC3C;AACD,MAAI,CAAC,KAAK,CAAC,EAAE;AACZ,eAAY,IAAI,MAAM,CAAC,CAAC,CAAC,GAAC,GAAG;AAAC,GAC9B;AACD,WAAS,GAAG,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC;AAAC,AACtC,MAAI,SAAS,IAAI,CAAC,EAAE;AACnB,OAAI,OAAO,EAAE;AACZ,aAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;AAAC,IAClC;AACD,OAAI,CAAC,OAAO,EAAE;;AAEb,YAAQ,GAAG,SAAS,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC,aAAS,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,MAAM;AACN,aAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IACjC;AACD,OAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AACzE,aAAS,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAC,EAAE,CAAC;AAAC,IAC3C;AACD,OAAI,OAAO,EAAE;AACZ,WAAO,IAAI,GAAG;AAAC,IACf;AACD,UAAO,IAAI,SAAS;;AAAC,AAErB,OAAI,OAAO,EAAE;AACZ,WAAO,IAAI,GAAG,GAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC9B,QAAI,SAAS,KAAK,GAAG,EAAE;AACtB,YAAO,IAAI,GAAG,CAAC;KACf;IACD,MAAM;AACN,WAAO,IAAI,GAAG,GAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC9B;AACD,OAAI,CAAC,OAAO,EAAE;AACb;AAAM,IACN;GACD;EACD;;AAED,QAAO,OAAO,CAAC;CACf,CAAC","file":"index-compiled.js","sourcesContent":["/*jshint node:true */\r\n\r\n\"use strict\";\r\n\r\nvar minimalDesc = ['h', 'min', 's', 'ms', 'Î¼s', 'ns'];\r\nvar verboseDesc = ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'];\r\nvar convert = [60*60, 60, 1, 1e6, 1e3, 1];\r\n\r\nmodule.exports = function (source, opts) {\r\n\tvar verbose, precise, i, spot, sourceAtStep, valAtStep, decimals, strAtStep, results;\r\n\r\n\tverbose = false;\r\n\tprecise = false;\r\n\tif (opts) {\r\n\t\tverbose = opts.verbose || false;\r\n\t\tprecise = opts.precise || false;\r\n\t}\r\n\r\n\tif (!Array.isArray(source) || source.length !== 2) {\r\n\t\treturn '';\r\n\t}\r\n\tif (typeof source[0] !== 'number' || typeof source[1] !== 'number') {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tresults = '';\r\n\r\n\t// foreach unit\r\n\tfor (i = 0; i < 6; i++) {\r\n\t\tspot = i < 3 ? 0 : 1; // grabbing first or second spot in source array\r\n\t\tsourceAtStep = source[spot];\r\n\t\tif (i !== 3 && i !== 0) {\r\n\t\t\tsourceAtStep = sourceAtStep % convert[i-1]; // trim off previous portions\r\n\t\t}\r\n\t\tif (i === 2) {\r\n\t\t\tsourceAtStep += source[1]/1e9; // get partial seconds from other portion of the array\r\n\t\t}\r\n\t\tvalAtStep = sourceAtStep / convert[i]; // val at this unit\r\n\t\tif (valAtStep >= 1) {\r\n\t\t\tif (verbose) {\r\n\t\t\t\tvalAtStep = Math.floor(valAtStep); // deal in whole units, subsequent laps will get the decimal portion\r\n\t\t\t}\r\n\t\t\tif (!precise) {\r\n\t\t\t\t// don't fling too many decimals\r\n\t\t\t\tdecimals = valAtStep >= 10 ? 0 : 2;\r\n\t\t\t\tstrAtStep = valAtStep.toFixed(decimals);\r\n\t\t\t} else {\r\n\t\t\t\tstrAtStep = valAtStep.toString();\r\n\t\t\t}\r\n\t\t\tif (strAtStep.indexOf('.') > -1 && strAtStep[strAtStep.length-1] === '0') {\r\n\t\t\t\tstrAtStep = strAtStep.replace(/\\.?0+$/,''); // remove trailing zeros\r\n\t\t\t}\r\n\t\t\tif (results) {\r\n\t\t\t\tresults += ' '; // append space if we have a previous value\r\n\t\t\t}\r\n\t\t\tresults += strAtStep; // append the value\r\n\t\t\t// append units\r\n\t\t\tif (verbose) {\r\n\t\t\t\tresults += ' '+verboseDesc[i];\r\n\t\t\t\tif (strAtStep !== '1') {\r\n\t\t\t\t\tresults += 's';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tresults += ' '+minimalDesc[i];\r\n\t\t\t}\r\n\t\t\tif (!verbose) {\r\n\t\t\t\tbreak; // verbose gets as many groups as necessary, the rest get only one\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn results;\r\n};\r\n"]}