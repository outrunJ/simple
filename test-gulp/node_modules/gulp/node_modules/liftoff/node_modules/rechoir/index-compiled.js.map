{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE7B,IAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC7C,IAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC7C,IAAM,QAAQ,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE3C,OAAO,CAAC,OAAO,GAAG,UAAU,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE;AAC9D,MAAI,MAAM,EAAE,OAAO,CAAC;AACpB,MAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,MAAI,GAAG,CAAC;AACR,MAAI,UAAU,GAAG,KAAK,CAAC;AACvB,MAAI,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC9B,MAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AACvD,WAAO,IAAI,CAAC;GACb;AACD,MAAI,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,MAAI,CAAC,MAAM,EAAE;AACX,QAAI,OAAO,EAAE;AACX,aAAO;KACR,MAAM;AACL,YAAM,IAAI,KAAK,CAAC,8BAA8B,GAAC,GAAG,GAAC,IAAI,CAAC,CAAC;KAC1D;GACF;AACD,MAAI,CAAC,GAAG,EAAE;AACR,OAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;GAC5C;AACD,MAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,UAAM,GAAG,CAAC,MAAM,CAAC,CAAC;GACnB;AACD,OAAK,IAAI,CAAC,IAAI,MAAM,EAAE;AACpB,UAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACnB,WAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;AACxD,SAAK,GAAG,AAAC,OAAO,YAAY,KAAK,GAAI,OAAO,GAAG,IAAI,CAAC;AACpD,QAAI,KAAK,EAAE;AACT,aAAO,GAAG,IAAI,CAAC;KAChB;AACD,YAAQ,CAAC,IAAI,CAAC;AACZ,gBAAU,EAAE,MAAM,CAAC,MAAM;AACzB,YAAM,EAAE,OAAO;AACf,WAAK,EAAE,KAAK;KACb,CAAC,CAAC;AACH,QAAI,CAAC,KAAK,EAAE;AACV,gBAAU,GAAG,KAAK,CAAC;AACnB,YAAM;KACP,MAAM;AACL,gBAAU,GAAG,IAAI,CAAC;KACnB;GACF;AACD,MAAI,UAAU,EAAE;AACd,OAAG,GAAG,IAAI,KAAK,CAAC,8CAA8C,GAAC,GAAG,GAAC,IAAI,CAAC,CAAC;AACzE,OAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACxB,QAAI,OAAO,EAAE;AACX,aAAO,GAAG,CAAC;KACZ,MAAM;AACL,YAAM,GAAG,CAAC;KACX;GACF;AACD,SAAO,QAAQ,CAAC;CACjB,CAAC","file":"index-compiled.js","sourcesContent":["const path = require('path');\n\nconst extension = require('./lib/extension');\nconst normalize = require('./lib/normalize');\nconst register = require('./lib/register');\n\nexports.prepare = function (extensions, filepath, cwd, nothrow) {\n  var option, attempt;\n  var attempts = [];\n  var err;\n  var onlyErrors = false;\n  var ext = extension(filepath);\n  if (Object.keys(require.extensions).indexOf(ext) !== -1) {\n    return true;\n  }\n  var config = normalize(extensions[ext]);\n  if (!config) {\n    if (nothrow) {\n      return;\n    } else {\n      throw new Error('No module loader found for \"'+ext+'\".');\n    }\n  }\n  if (!cwd) {\n    cwd = path.dirname(path.resolve(filepath));\n  }\n  if (!Array.isArray(config)) {\n    config = [config];\n  }\n  for (var i in config) {\n    option = config[i];\n    attempt = register(cwd, option.module, option.register);\n    error = (attempt instanceof Error) ? attempt : null;\n    if (error) {\n      attempt = null;\n    }\n    attempts.push({\n      moduleName: option.module,\n      module: attempt,\n      error: error\n    });\n    if (!error) {\n      onlyErrors = false;\n      break;\n    } else {\n      onlyErrors = true;\n    }\n  }\n  if (onlyErrors) {\n    err = new Error('Unable to use specified module loaders for \"'+ext+'\".');\n    err.failures = attempts;\n    if (nothrow) {\n      return err;\n    } else {\n      throw err;\n    }\n  }\n  return attempts;\n};\n"]}