{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["const expect = require('chai').expect;\nconst exec = require('child_process').exec;\n\nconst reorder = require('../lib/reorder');\nconst flaggedRespawn = require('../');\n\ndescribe('flaggedRespawn', function () {\n  var flags = ['--harmony', '--use_strict']\n\n  describe('reorder', function () {\n\n    it('should re-order args, placing special flags first', function () {\n      var needsRespawn = ['node', 'file.js', '--flag', '--harmony', 'command'];\n      var noRespawnNeeded = ['node', 'bin/flagged-respawn', 'thing'];\n      expect(reorder(flags, needsRespawn))\n        .to.deep.equal(['node', '--harmony', 'file.js', '--flag', 'command']);\n      expect(reorder(flags, noRespawnNeeded))\n        .to.deep.equal(noRespawnNeeded);\n    });\n\n    it('should ignore special flags when they are in the correct position', function () {\n      var args = ['node', '--harmony', 'file.js', '--flag'];\n      expect(reorder(flags, reorder(flags, args))).to.deep.equal(args);\n    });\n\n  });\n\n  describe('execute', function () {\n\n    it('should throw if no flags are specified', function () {\n      expect(function () { flaggedRespawn.execute(); }).to.throw;\n    });\n\n    it('should throw if no argv is specified', function () {\n      expect(function () { flaggedRespawn.execute(flags); }).to.throw;\n    });\n\n    it('should respawn and pipe stderr/stdout to parent', function (done) {\n      exec('node ./test/bin/respawner.js --harmony', function (err, stdout, stderr) {\n        expect(stdout.replace(/[0-9]/g, '')).to.equal('Special flags found, respawning.\\nRespawned to PID: \\nRunning!\\n');\n        done();\n      });\n    });\n\n    it('should respawn and pass exit code from child to parent', function (done) {\n      exec('node ./test/bin/exit_code.js --harmony', function (err, stdout, stderr) {\n        expect(err.code).to.equal(100);\n        done();\n      });\n    });\n\n    it.skip('should respawn; if child is killed, parent should exit with same signal', function (done) {\n      // TODO: figure out why travis hates this\n      exec('node ./test/bin/signal.js --harmony', function (err, stdout, stderr) {\n        console.log('err', err);\n        console.log('stdout', stdout);\n        console.log('stderr', stderr);\n        expect(err.signal).to.equal('SIGHUP');\n        done();\n      });\n    });\n\n    it('should call back with ready as true when respawn is not needed', function () {\n      var argv = ['node', './test/bin/respawner'];\n      flaggedRespawn(flags, argv, function (ready) {\n        expect(ready).to.be.true;\n      });\n    });\n\n    it('should call back with ready as false when respawn is needed', function () {\n      var argv = ['node', './test/bin/respawner', '--harmony'];\n      flaggedRespawn(flags, argv, function (ready) {\n        expect(ready).to.be.false;\n      });\n    });\n\n    it('should call back with the child process when ready', function () {\n      var argv = ['node', './test/bin/respawner', '--harmony'];\n      flaggedRespawn(flags, argv, function (ready, child) {\n        expect(child.pid).to.not.equal(process.pid);\n      });\n    });\n\n    it('should call back with own process when respawn not needed', function () {\n      var argv = ['node', './test/bin/respawner'];\n      flaggedRespawn(flags, argv, function (ready, child) {\n        expect(child.pid).to.equal(process.pid);\n      });\n    });\n\n  });\n\n});\n"]}